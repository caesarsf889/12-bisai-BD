#define R_direction    4  //控制右邊馬達方向的Pin腳
#define RightWheel_Pin 5  //速度
#define LeftWheel_Pin  6  //速度
#define L_direction    7  //控制左邊馬達方向的Pin腳
int counterT=0;
int counter=0;
int counterffff = 0;
bool white = false;
bool black = false;
//------avoid-------
int trig = 13 , echo = 12;
//-------PID--------
float Kp=20,Ki=2,Kd=2;
float error=0, P=0, I=0, D=0, PID_value=0;
float previous_error=0, previous_I=0;
int initial_motor_speed = 80;
float right_motor_speed;
float left_motor_speed;
//-------PID--------
//-------IRsensor--------
int IRstatus;
int line;
int outline;
int sensor[5]={0, 0, 0, 0, 0};
int SL;
int SML;
int SM;
int SMR;
int SR;
//-------IRsensor--------
void IRAD()
{
  if(analogRead(A0) > 40)  {SL = 1;}else{SL = 0;}
  if(analogRead(A1) > 40) {SML = 1;}else{SML = 0;}
  if(analogRead(A2) > 40)  {SM = 1;}else{SM = 0;}
  if(analogRead(A3) > 40) {SMR = 1;}else{SMR = 0;}
  if(analogRead(A4) > 40)  {SR = 1;}else{SR = 0;}
}
void calculate_pid()
{
  //--------紅外線誤差-------------------
  line = 1;
  outline = 0;

  sensor[0]= SL;
  sensor[1]= SML;
  sensor[2]= SM;
  sensor[3]= SMR;
  sensor[4]= SR;

  if((sensor[0]==outline)&&(sensor[1]==outline)&&(sensor[2]==outline)&&(sensor[3]==outline)&&(sensor[4]==line))
    error=4;
  else if((sensor[0]==line)&&(sensor[1]==outline)&&(sensor[2]==outline)&&(sensor[3]==outline)&&(sensor[4]==outline))
    error=-4;
  
  if((sensor[0]==outline)&&(sensor[1]==outline)&&(sensor[2]==outline)&&(sensor[3]==line)&&(sensor[4]==line))
    error=3;
  else if((sensor[0]==line)&&(sensor[1]==line)&&(sensor[2]==outline)&&(sensor[3]==outline)&&(sensor[4]==outline))
    error=-3;

  if((sensor[0]==outline)&&(sensor[1]==outline)&&(sensor[2]==outline)&&(sensor[3]==line)&&(sensor[4]==outline))
      error=2;
  else if((sensor[0]==outline)&&(sensor[1]==line)&&(sensor[2]==outline)&&(sensor[3]==outline)&&(sensor[4]==outline))
    error=-2;

  if((sensor[0]==outline)&&(sensor[1]==outline)&&(sensor[2]==line)&&(sensor[3]==line)&&(sensor[4]==outline))
    error=1;
  else if((sensor[0]==outline)&&(sensor[1]==line)&&(sensor[2]==line)&&(sensor[3]==outline)&&(sensor[4]==outline))
    error=-1;

  if((sensor[0]==outline)&&(sensor[1]==outline)&&(sensor[2]==line)&&(sensor[3]==outline)&&(sensor[4]==outline))
    error=0;
//--------紅外線誤差-------------------
  P = error;
  I = I + previous_I;
  D = error-previous_error;

  PID_value =(Kp*P) + (Ki*I) + (Kd*D);

  previous_I=I;
  previous_error=error;
}

void motorcontrol()
{
  left_motor_speed = initial_motor_speed+PID_value;
  right_motor_speed = initial_motor_speed-PID_value;  

  if(left_motor_speed < 0)
    left_motor_speed = 0;
  if(right_motor_speed < 0)
    right_motor_speed = 0;
    
  digitalWrite(R_direction,LOW);
  digitalWrite(L_direction,LOW);
  analogWrite(RightWheel_Pin,right_motor_speed);
  analogWrite(LeftWheel_Pin,left_motor_speed);
}

float cm(int trig, int echo) 
{
  pinMode(trig,OUTPUT);
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig,LOW);
  pinMode(echo, INPUT);
  return pulseIn(echo,HIGH,30000)/58.0;
}

void US1()
{
  int Ultrasound = cm(trig,echo);
  if(Ultrasound < 15 && Ultrasound > 3) 
  {
    counter+=1;
    digitalWrite(R_direction,LOW);
    digitalWrite(L_direction,LOW);
    analogWrite(RightWheel_Pin,0);
    analogWrite(LeftWheel_Pin,80);
    delay(450);
    
    digitalWrite(R_direction,LOW);
    digitalWrite(L_direction,LOW);
    analogWrite(RightWheel_Pin,100);
    analogWrite(LeftWheel_Pin,60);
    
    while(1)
    {
      int R = analogRead(A2);
      if(R > 40)
        break;
    }
  }
} 
void US2()
{   
  black = true;
  int Ultrasound = cm(trig,echo);
  if(Ultrasound < 15 && Ultrasound > 3) 
  {
    digitalWrite(R_direction,LOW);
    digitalWrite(L_direction,LOW);
    analogWrite(RightWheel_Pin,80);
    analogWrite(LeftWheel_Pin,0);
    delay(500);
    
    digitalWrite(R_direction,LOW);
    digitalWrite(L_direction,LOW);
    analogWrite(RightWheel_Pin,60);
    analogWrite(LeftWheel_Pin,100);   
    while(1)
    {
      int R = analogRead(A2);
      if(R > 40)
        break;
    }
  }
}

void Forward()
{
  white = true;
  digitalWrite(R_direction,LOW);  
  digitalWrite(L_direction,LOW);
  analogWrite(RightWheel_Pin,72);  //right_motor_speed
  analogWrite(LeftWheel_Pin,70);    //left_motor_speed
}

void TurnLeft()
{ 
  if(counterT == 4 ||  counterT == 5 || counterT == 6)
  {
    Forward();
    delay(500);
  }
  else
  { 
    if(black == true)
    {
      counterffff += 1;
      if(counterffff > 4)
      {
        delay(200);
        digitalWrite(R_direction,LOW);  
        digitalWrite(L_direction,LOW);
        analogWrite(RightWheel_Pin,0);                  //right_motor_speed
        analogWrite(LeftWheel_Pin,80);    //left_motor_speed
        delay(150);
        while(1)
          { 
            int a =  analogRead(A2);
            if ( a > 40 )
             break;
          }
      }
      else
      {
        digitalWrite(R_direction,LOW);  
        digitalWrite(L_direction,LOW);
        analogWrite(RightWheel_Pin,90);  //right_motor_speed
        analogWrite(LeftWheel_Pin,0);                   //left_motor_speed
        delay(200);
        while(1)
          { 
            int a =  analogRead(A2);
            if ( a > 40 )
              break;
          }
       }
    }
    else
    {
      digitalWrite(R_direction,LOW);  
      digitalWrite(L_direction,LOW);
      analogWrite(RightWheel_Pin,right_motor_speed);  //right_motor_speed
      analogWrite(LeftWheel_Pin,0);                   //left_motor_speed
      delay(150);
      while(1)
        { 
          int a =  analogRead(A2);
          if ( a > 40 )
            break;
        }
     }   
  }
}

void TurnRight()
{ 
  if(counterT == 4 ||  counterT == 5 || counterT == 6)
  {
    Forward();
    delay(500);
  }
  else
  {
    digitalWrite(R_direction,LOW);  
    digitalWrite(L_direction,LOW);
    analogWrite(RightWheel_Pin,0);                  //right_motor_speed
    analogWrite(LeftWheel_Pin,left_motor_speed);    //left_motor_speed
    delay(150);
    while(1)
      { 
        int a =  analogRead(A2);
        if ( a > 40 )
         break;
      }
  }
}

void quickRight()
{
  delay(250);
  digitalWrite(R_direction,HIGH);  
  digitalWrite(L_direction,LOW);
  analogWrite(RightWheel_Pin,80);  //right_motor_speed
  analogWrite(LeftWheel_Pin,80);    //left_motor_speed
  delay(500);
  while(1)
    { int a =  analogRead(A2);
      if ( a > 40 )
        break;
    }  
}

void BB()
{
  if(counterT == 4 ||  counterT == 5 || counterT == 6)
  {
    Forward();
    delay(500);
  }
  else
  {
    delay(500);
    digitalWrite(R_direction,LOW);  
    digitalWrite(L_direction,LOW);
    analogWrite(RightWheel_Pin,0);  //right_motor_speed
    analogWrite(LeftWheel_Pin,0);    //left_motor_speed
    delay(30000);
  }
}

void counttT()
{
  if(white == true)
  {
    counterT += 1;
  }
}

void SC()
{
  switch(IRstatus)
  { 
    case 0: //全白 前進
      Forward();
      break;
    case 4: //SM  前進
      motorcontrol();
      break;
    case 2: //SML 向右微調前進
      motorcontrol();
      break;
    case 8: //SMR 向左微調前進
      motorcontrol();
      break;
    case 6: //SM+SML 向右微調前進
      motorcontrol();
      break;
    case 12: //SM+SMR 向左微調前進
      motorcontrol();
      break;
    case 7:  //SM+SML+SL 左轉
      counttT();
      TurnLeft();
      break;
    case 15: //SMR+SM+SML+SL 左轉
      counttT();
      TurnLeft();
      break;
    case 3: //SML+SL 左轉
      TurnLeft();
      break;
    case 28: //SM+SMR+SR 右轉
      counttT();
      TurnRight();
      break;
    case 30: //SML+SM+SMR+SR 右轉
      counttT();
      TurnRight();
      break;
    case 24: //SMR+SR 右轉
      TurnRight();
      break;
    case 20:  //SM+SR
      quickRight(); 
      break; 
    case 22:  //SML+SM+SR
      quickRight(); 
    case 31: //全黑
      counttT();
      BB();
      break;
  }
}

void Report()
{
  Serial.print(analogRead(A0));Serial.print("\t");
  Serial.print(analogRead(A1));Serial.print("\t");
  Serial.print(analogRead(A2));Serial.print("\t");
  Serial.print(analogRead(A3));Serial.print("\t");
  Serial.print(analogRead(A4));Serial.print("\t");
  Serial.print("轉彎次數");Serial.print(counterT);Serial.print("\t");
  Serial.println(IRstatus);
}

void setup() 
{
Serial.begin(9600);
pinMode(R_direction,OUTPUT);
pinMode(RightWheel_Pin,OUTPUT);
pinMode(LeftWheel_Pin,OUTPUT);
pinMode(L_direction,OUTPUT);

pinMode(A0,INPUT);
pinMode(A1,INPUT);
pinMode(A2,INPUT);
pinMode(A3,INPUT);
pinMode(A4,INPUT);

pinMode(trig, OUTPUT);
pinMode(echo, INPUT);
}

void loop() 
{
  IRAD();
  calculate_pid();

  IRstatus = 0;
    if(SL == 1)
      IRstatus= IRstatus + 1;

    if(SML == 1)
      IRstatus= IRstatus + 2;

    if(SM == 1)
      IRstatus= IRstatus + 4;

    if(SMR == 1)
      IRstatus= IRstatus + 8;

    if(SR == 1)
      IRstatus= IRstatus + 16;

  SC();
  Report();

  if(counter==1)
  {
    US2();
  }
  else
  {
    US1();
  }
}